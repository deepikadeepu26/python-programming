class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class KthLargest(object):
        import heapq

        def __init__(self, k, nums):

            self.k = k
            self.min_heap = []
            for num in nums:
                self.add(num)
        def add(self, val):
            if len(self.min_heap) < self.k :
                heapq.heappush(self.min_heap, val)

            else:
                if  val >  self .min_heap[0] :
                    heapq.heappush(self.min_heap, val)
                    if len(self.min_heap) > self.k :
                        heapq.heappop(self.min_heap)

            return self.min_heap[0]

            

            
